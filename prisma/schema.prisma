generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String    @unique
  password      String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Store {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  userId     String      @db.ObjectId
  billboards BillBoard[] @relation("StoreToBillboard")
  categories Category[]  @relation("StoreToCategory")
  sizes      Size[]      @relation("StoreToSize")
  colors     Color[]     @relation("StoreToColor")
  products   Product[]   @relation("StoreToProduct")
  orders     Order[]     @relation("StoreToOrder")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model BillBoard {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  storeId    String     @db.ObjectId
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  label      String
  imageUrl   String
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([storeId])
}

enum CategoryType {
  MEN
  WOMEN
  UNISEX
  BEAUTY
}

enum CategoryClassification {
  TOPWEAR
  BOTTOMWEAR
  FOOTWEAR
  INNERWEARANDSLEEPWEAR
  MAKEUP
  SKINCARE
  HAIRCARE
  FRAGRANCES
}

model Category {
  id             String                 @id @default(auto()) @map("_id") @db.ObjectId
  type           CategoryType           @default(UNISEX)
  classification CategoryClassification @default(TOPWEAR)
  storeId        String                 @db.ObjectId
  store          Store                  @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId    String                 @db.ObjectId
  billboard      BillBoard              @relation(fields: [billboardId], references: [id])
  products       Product[]              @relation("CategoryToProduct")
  name           String
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt

  @@index([storeId, billboardId])
}

model Size {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  storeId   String    @db.ObjectId
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id])
  products  Product[]
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Color {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  storeId   String    @db.ObjectId
  store     Store     @relation("StoreToColor", fields: [storeId], references: [id])
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]

  @@index([storeId])
}

enum ProductType {
  MEN
  WOMEN
  KIDS
  BEAUTY
}

model Product {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  storeId         String         @db.ObjectId
  store           Store          @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId      String         @db.ObjectId
  category        Category       @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name            String
  price           Int
  about           String
  description     String
  sizeAndFit      String[]
  materialAndCare String[]
  isFeatured      Boolean        @default(false)
  isArchieved     Boolean        @default(false)
  type            ProductType
  stock           Int            @default(0)
  sizeId          String         @db.ObjectId
  size            Size           @relation(fields: [sizeId], references: [id])
  colorId         String         @db.ObjectId
  color           Color          @relation(fields: [colorId], references: [id])
  productImages   ProductImage[]
  orderItems      OrderItem[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([sizeId, colorId, type, categoryId, storeId])
}

model ProductImage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Order {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  storeId    String      @db.ObjectId
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([storeId])
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String  @db.ObjectId
  quantity  Int     @default(1)
  order     Order   @relation(fields: [orderId], references: [id])
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId, productId])
}
